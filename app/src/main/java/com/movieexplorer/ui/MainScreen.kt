package com.movieexplorer.ui\n\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.material3.*\nimport androidx.compose.runtime.*\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.text.style.TextAlign\nimport androidx.compose.ui.unit.dp\nimport androidx.lifecycle.viewmodel.compose.viewModel\nimport com.movieexplorer.viewmodel.MovieViewModel\n\n/**\n * Tela principal que orquestra a UI do aplicativo.\n */\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun MainScreen(viewModel: MovieViewModel = viewModel()) {\n    val selectedMovie = viewModel.selectedMovie\n    val isLoadingDetails = viewModel.isLoadingDetails\n\n    // Se um filme for selecionado, mostra a tela de detalhes ou seu estado de carregamento.\n    // Caso contrÃ¡rio, mostra a tela de busca principal.\n    if (selectedMovie != null || isLoadingDetails) {\n        DetailsContent(viewModel)\n    } else {\n        SearchContent(viewModel)\n    }\n}\n\n/**\n * ConteÃºdo da tela principal (busca e lista de filmes).\n */\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nprivate fun SearchContent(viewModel: MovieViewModel) {\n    val movies = viewModel.movies\n    val query = viewModel.query\n    val isLoading = viewModel.isLoading\n    val errorMessage = viewModel.errorMessage\n\n    Scaffold(\n        topBar = { TopAppBar(title = { Text(\"Movie Explorer\") }) }\n    ) {\ padding ->\n        Column(\n            modifier = Modifier\n                .fillMaxSize()\n                .padding(padding)\n                .padding(horizontal = 16.dp)\n        ) {\n            Spacer(modifier = Modifier.height(16.dp))\n\n            SearchBar(\n                query = query,\n                onQueryChange = viewModel::updateQuery,\n                onSearch = viewModel::searchMovies\n            )\n\n            Spacer(modifier = Modifier.height(16.dp))\n\n            // ConteÃºdo central que muda com base no estado\n            when {\n                isLoading -> {\n                    LoadingState(\"Buscando filmes...\")\n                }\n                errorMessage != null -> {\n                    ErrorState(errorMessage)\n                }\n                movies.isEmpty() && query.isBlank() -> {\n                    InitialState()\n                }\n                else -> {\n                    MovieList(\n                        movies = movies,\n                        onMovieClick = { movie -> viewModel.getMovieDetails(movie.imdbID) }\n                    )\n                }\n            }\n        }\n    }\n}\n\n/**\n * ConteÃºdo da tela de detalhes de um filme.\n */\n@Composable\nprivate fun DetailsContent(viewModel: MovieViewModel) {\n    val selectedMovie = viewModel.selectedMovie\n    val isLoadingDetails = viewModel.isLoadingDetails\n\n    if (isLoadingDetails) {\n        LoadingState(\"Carregando detalhes...\")\n    } else if (selectedMovie != null) {\n        MovieDetailsScreen(\n            movieDetails = selectedMovie,\n            onBackClick = { viewModel.clearSelectedMovie() }\n        )\n    }\n}\n\n/**\n * Composable para o estado de carregamento.\n */\n@Composable\nprivate fun LoadingState(message: String) {\n    Box(\n        modifier = Modifier.fillMaxSize(),\n        contentAlignment = Alignment.Center\n    ) {\n        Column(horizontalAlignment = Alignment.CenterHorizontally) {\n            CircularProgressIndicator()\n            Spacer(modifier = Modifier.height(16.dp))\n            Text(text = message, style = MaterialTheme.typography.bodyLarge)\n        }\n    }\n}\n\n/**\n * Composable para o estado inicial, antes de qualquer busca.\n */\n@Composable\nprivate fun InitialState() {\n    Box(\n        modifier = Modifier.fillMaxSize(),\n        contentAlignment = Alignment.Center\n    ) {\n        Column(horizontalAlignment = Alignment.CenterHorizontally) {\n            Text(text = \"ðŸŽ¬\", style = MaterialTheme.typography.displayLarge)\n            Spacer(modifier = Modifier.height(16.dp))\n            Text(\n                text = \"Bem-vindo ao Movie Explorer!\",\n                style = MaterialTheme.typography.headlineSmall,\n                textAlign = TextAlign.Center\n            )\n            Spacer(modifier = Modifier.height(8.dp))\n            Text(\n                text = \"Digite o nome de um filme para comeÃ§ar a busca\",\n                style = MaterialTheme.typography.bodyLarge,\n                textAlign = TextAlign.Center,\n                color = MaterialTheme.colorScheme.onSurfaceVariant\n            )\n        }\n    }\n}\n\n/**\n * Composable para exibir uma mensagem de erro.\n */\n@Composable\nprivate fun ErrorState(message: String) {\n    Card(\n        modifier = Modifier.fillMaxWidth(),\n        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.errorContainer)\n    ) {\n        Text(\n            text = message,\n            modifier = Modifier.padding(16.dp),\n            color = MaterialTheme.colorScheme.onErrorContainer,\n            textAlign = TextAlign.Center\n        )\n    }\n}